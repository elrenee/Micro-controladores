
Lab 04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800120  00800120  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d2  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000384  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9e:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initimr0>:
	sei();
}
void initimr0()
{
	CLKPR = (1<<CLKPCE) ;
	CLKPR = (1<<CS01)|(1<<CS00);
  a6:	e1 e6       	ldi	r30, 0x61	; 97
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	TCCR0A=0;
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS02);
  b2:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 158;
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	85 bd       	out	0x25, r24	; 37
}
  ba:	8e e9       	ldi	r24, 0x9E	; 158
  bc:	86 bd       	out	0x26, r24	; 38
  be:	08 95       	ret

000000c0 <initadmux>:


void initadmux()
{
	ADMUX=0;
	ADMUX |= (1<< REFS0) | (1<<ADLAR) | (1<<MUX1) | (1<<MUX0);//Referencia de 5v, Ajustado a la izq, Canal 3 de ADC
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	ADCSRA= 0;
  c6:	80 81       	ld	r24, Z
  c8:	83 66       	ori	r24, 0x63	; 99
  ca:	80 83       	st	Z, r24
	ADCSRA |= (1<< ADPS1)|(1<< ADPS0)|(1<<ADATE) |(1<< ADIE)| (1<< ADEN);//Prescalers, Autotrigger, Interrupciónes habilitadas, ADC Enable.
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
	ADCSRB =0; //Modo free running.
  d2:	80 81       	ld	r24, Z
  d4:	8b 6a       	ori	r24, 0xAB	; 171
  d6:	80 83       	st	Z, r24
}
  d8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  dc:	08 95       	ret

000000de <setup>:
/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli();
	DDRD = 0XFF;
  de:	f8 94       	cli
	PORTD = 0X00;// PUERTO D COMO SALIDA, 0V EN CADA PIN 
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	9a b9       	out	0x0a, r25	; 10
	
  e4:	1b b8       	out	0x0b, r1	; 11
	DDRC |= (1<<PORTC4)|(0<<PORTC3)|(1<<PORTC2)|(1<<PORTC1)|(1<<PORTC0);//Pines 0, 1, 2 y 4 del Puerto C COMO SALIDA, Pin 3 como entrada.
	PORTC= 0x00; 
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	87 61       	ori	r24, 0x17	; 23
  ea:	87 b9       	out	0x07, r24	; 7
	
  ec:	18 b8       	out	0x08, r1	; 8
	DDRB = 0x00;
	PORTB = 0xFF;
  ee:	14 b8       	out	0x04, r1	; 4
	
  f0:	95 b9       	out	0x05, r25	; 5
	PCMSK0 = (1<< PCINT0) | (1<< PCINT1);
	PCICR = (1<< PCIE0); //interruptions habilitadas en el puerto B
  f2:	83 e0       	ldi	r24, 0x03	; 3
  f4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	//configuramos el Convertidor de analogo a digital. 
	initadmux();
	initimr0();	
  fe:	0e 94 60 00 	call	0xc0	; 0xc0 <initadmux>
	ADCSRA |= (1<<ADSC); //Iniciamos la Conversión
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <initimr0>
	sei();
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 83       	st	Z, r24
}
 110:	78 94       	sei
 112:	08 95       	ret

00000114 <main>:
/****************************************/
// Main Function

int main(void)
{
	setup();
 114:	0e 94 6f 00 	call	0xde	; 0xde <setup>
	while (1)
	{
		PORTC	|= (1<<PORTC0);
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	88 b9       	out	0x08, r24	; 8
		PORTD	= contador;
 11e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 122:	8b b9       	out	0x0b, r24	; 11
		PORTC	&= ~(1<< PORTC0);
 124:	88 b1       	in	r24, 0x08	; 8
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	88 b9       	out	0x08, r24	; 8
		PORTC	|=(1<< PORTC2);
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	88 b9       	out	0x08, r24	; 8
		PORTD	= lista7seg[unidades];
 130:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <unidades>
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	80 81       	ld	r24, Z
 140:	8b b9       	out	0x0b, r24	; 11
		PORTC	&= ~(1<< PORTC2);
 142:	88 b1       	in	r24, 0x08	; 8
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	88 b9       	out	0x08, r24	; 8
		PORTC	|= (1<<PORTC1);
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	88 b9       	out	0x08, r24	; 8
		PORTD	= lista7seg[decenas];
 14e:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <decenas>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	8b b9       	out	0x0b, r24	; 11
		PORTC	&= ~(1<<PORTC1) ;
 160:	88 b1       	in	r24, 0x08	; 8
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	88 b9       	out	0x08, r24	; 8
 166:	d8 cf       	rjmp	.-80     	; 0x118 <main+0x4>

00000168 <__vector_3>:

/**************************************/
// Interrupt routines
ISR(PCINT0_vect)
{	
	botonesPC = PINB;
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
	TIFR0	|= (1 << TOV0);
 174:	83 b1       	in	r24, 0x03	; 3
 176:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <botonesPC>
	TCNT0=158;
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	85 bb       	out	0x15, r24	; 21
	TIMSK0= (1<<TOIE0);
 180:	8e e9       	ldi	r24, 0x9E	; 158
 182:	86 bd       	out	0x26, r24	; 38
}
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
	TIMSK0=0;
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
	uint8_t botonest0 = PINB;
 1a4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	if (botonesPC == botonest0)
 1a8:	83 b1       	in	r24, 0x03	; 3
	{
 1aa:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <botonesPC>
 1ae:	89 13       	cpse	r24, r25
 1b0:	0e c0       	rjmp	.+28     	; 0x1ce <__vector_16+0x38>
		uint8_t temporal = botonest0 & (0b00000001);
		if(temporal != 0b00000001)
		{
 1b2:	80 fd       	sbrc	r24, 0
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <__vector_16+0x2a>
			contador++;
		}
 1b6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <contador>
 1ba:	9f 5f       	subi	r25, 0xFF	; 255
 1bc:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <contador>
		temporal = botonest0 & (0b00000010);
		if(temporal != 0b00000010)
		{
 1c0:	81 fd       	sbrc	r24, 1
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <__vector_16+0x38>
			contador--;
		}
 1c4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <contador>
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <contador>
	}
}

 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_21>:
ISR(ADC_vect)
{
	conversion= ADCH;
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
	unidades= conversion & 0x0F;
 1ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1ee:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
	decenas = (conversion & 0xF0)>>4;
 1f2:	98 2f       	mov	r25, r24
 1f4:	9f 70       	andi	r25, 0x0F	; 15
 1f6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <unidades>
	
 1fa:	82 95       	swap	r24
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <decenas>
	else if (conversion<contador)
	{
		//apagar led
	}
}
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
